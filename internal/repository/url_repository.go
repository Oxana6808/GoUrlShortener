package repository

import (
	"errors"
	"fmt"
)

//// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ URL –≤ –±–∞–∑–µ
//func SaveURL(short, original string) {
//
//	// –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç URL
//	url := URL{ShortURL: short, Original: original}
//
//	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
//	result := DB.Create(&url)
//	if result.Error != nil {
//		fmt.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", result.Error)
//		return // –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
//	}
//
//	fmt.Println("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", url)
//}

func SaveURL(short, original string) error {
	var existing URL
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º URL
	if err := DB.Where("original = ?", original).First(&existing).Error; err == nil {
		fmt.Println("üîÑ –≠—Ç–æ—Ç URL —É–∂–µ –µ—Å—Ç—å:", existing.ShortURL)
		return nil // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç URL
	url := URL{ShortURL: short, Original: original}
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := DB.Create(&url).Error; err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", err)
		return err
	}
	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", url)
	return nil
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É
func GetOriginalURL(short string) (string, error) {
	var url URL
	if err := DB.Where("short_url = ?", short).First(&url).Error; err != nil {
		return "", errors.New("‚ùå URL not found")
	}
	return url.Original, nil
}
