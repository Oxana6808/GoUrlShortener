package handlers

import (
	"GoUrlShortener/internal/repository"
	"fmt"
	"github.com/gin-gonic/gin"
	"math/rand"
	"net/http"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
type ShortenRequest struct {
	URL string `json:"url"`
}

type ShortenResponse struct {
	ShortURL string `json:"short_url"`
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ URL
func ShortenURL(c *gin.Context) {
	var req ShortenRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"})
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥
	shortCode := generateShortCode()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –ë–î —á–µ—Ä–µ–∑ repository.SaveURL (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏)
	repository.SaveURL(shortCode, req.URL)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π URL –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
	fullShortURL := fmt.Sprintf("http://localhost:8080/%s", shortCode)
	fmt.Println("üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä–æ—Ç–∫–∏–π URL:", fullShortURL)
	c.JSON(http.StatusOK, ShortenResponse{ShortURL: fullShortURL})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É URL
func RedirectURL(c *gin.Context) {

	shortURL := c.Param("shortURL")
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º shortURL:", shortURL) // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
	var url repository.URL
	if err := repository.DB.Where("short_url = ?", shortURL).First(&url).Error; err != nil {
		fmt.Println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:", shortURL)
		c.JSON(http.StatusNotFound, gin.H{"error": "URL –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	fmt.Println(" –ù–∞–π–¥–µ–Ω –≤ –ë–î:", url.Original)
	c.Redirect(http.StatusMovedPermanently, url.Original)

	if shortURL == "favicon.ico" || shortURL == "shorten" {
		c.JSON(http.StatusNotFound, gin.H{"error": "Invalid request"})
		return
	}
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
func generateShortCode() string {
	rand.Seed(time.Now().UnixNano())
	const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	short := make([]byte, 6)
	for i := range short {
		short[i] = letters[rand.Intn(len(letters))]
	}
	return string(short)
}
